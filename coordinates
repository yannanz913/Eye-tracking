img = cv2.imread('/Users/elainezhu/Desktop/Qtcam_21_06_03_15_32_45-1.jpg')
# y=220
# x=650
# h=500
# w=720
# img = img[y:y+h, x:x+w]

final = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
# l, a, b = cv2.split(lab)
# clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
# cl = clahe.apply(l)
#
# limg = cv2.merge((cl,a,b))
#
# final = cv2.cvtColor(limg, cv2.COLOR_LAB2BGR)
#
# cimg = final.copy()
# final = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
# final = cv2.medianBlur(final, 5)
# img = cv2.medianBlur(img, 5)
# imgray = cv2.GaussianBlur(img,(5,5),0)
# ret,th1 = cv2.threshold(imgray,127,255,cv2.THRESH_BINARY)
# th2 = cv2.adaptiveThreshold(imgray,255,cv2.ADAPTIVE_THRESH_MEAN_C,  cv2.THRESH_BINARY,3,5)
# th3 = cv2.adaptiveThreshold(imgray,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY,3,5)
# kernel = np.ones((5,5),np.uint8)
# erosion = cv2.erode(th2,kernel,iterations=1)
# dilation = cv2.dilate(erosion,kernel,iterations=1)
# imgray = cv2.Canny(erosion,30,100)
# print(final)
circles = cv2.HoughCircles(img,cv2.HOUGH_GRADIENT,1,100,
                            param1=50,param2=30,minRadius=50,maxRadius=65)
# circles = np.uint16(np.around(circles))
if circles is not None:
    # print("circle detected")
    circles = np.round(circles[0, :]).astype("int")
    for (x,y,r) in circles:
        cv2.circle(final, (x,y), r, (36,255,12), 3)
# print("no circle is detected")

# for i in circles[0,:]:
for i in circles:
    cv2.circle(final, (i[0], i[1]), i[2], (0, 255, 0), 2)
    cv2.circle(final, (i[0], i[1]), 2, (0, 0, 255), 3)
# print(len(P))
for i in circles:
    r = int(i[2])
    x = int(i[0])
    y = int(i[1])
    print("center of pupil", (x, y))
    print("radius of pupil", r)

cv2.imshow('detected pupil', final)

cv2.waitKey(0)
cv2.destroyAllWindows()
